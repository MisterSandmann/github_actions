name: Terraform AWS Deployment

on:
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform-deploy.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'terraform/**'
  workflow_dispatch:  # Manuelle Ausf√ºhrung

# Umgebungsvariablen auf Workflow-Ebene
env:
  TF_VERSION: '1.6.0'
  AWS_REGION: ${{ vars.AWS_REGION }}

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    environment: AWS_Terraform

    # Terraform outputs als Job-Output verf√ºgbar machen
    outputs:
      plan_exitcode: ${{ steps.plan.outputs.exitcode }}

    steps:
      - name: Repository auschecken
        uses: actions/checkout@v4

      - name: AWS Credentials konfigurieren
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Terraform Setup
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive
        working-directory: ./terraform
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Validate
        id: validate
        run: terraform validate
        working-directory: ./terraform

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan \
            -var="aws_region=${{ vars.AWS_REGION }}" \
            -var="project_name=github-actions-demo" \
            -var="environment=production" \
            -out=tfplan
        working-directory: ./terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Plan Output anzeigen
        run: terraform show -no-color tfplan
        working-directory: ./terraform

      - name: Plan als Artifact speichern
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: terraform/tfplan
          retention-days: 5

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: terraform-plan

    # Nur bei Push auf main (nicht bei PRs)
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    # Deployment-Environment (mit Protection Rules m√∂glich)
    environment:
      name: production
      url: ${{ steps.apply.outputs.webserver_url }}

    steps:
      - name: Repository auschecken
        uses: actions/checkout@v4

      - name: AWS Credentials konfigurieren
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Terraform Setup
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Plan-Artifact herunterladen
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan
          path: terraform/

      - name: Terraform Apply
        id: apply
        run: |
          terraform apply -auto-approve tfplan

          # Outputs extrahieren
          echo "webserver_url=$(terraform output -raw webserver_url)" >> $GITHUB_OUTPUT
          echo "instance_ip=$(terraform output -raw instance_public_ip)" >> $GITHUB_OUTPUT
        working-directory: ./terraform

      - name: Deployment Summary
        run: |
          echo "## üöÄ Deployment erfolgreich!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Webserver URL:** ${{ steps.apply.outputs.webserver_url }}" >> $GITHUB_STEP_SUMMARY
          echo "**IP-Adresse:** ${{ steps.apply.outputs.instance_ip }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚è≥ Der Server braucht ca. 2-3 Minuten zum Starten." >> $GITHUB_STEP_SUMMARY

  terraform-destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest

    # Nur manuell ausf√ºhrbar
    if: github.event_name == 'workflow_dispatch'

    steps:
      - name: Repository auschecken
        uses: actions/checkout@v4

      - name: AWS Credentials konfigurieren
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Terraform Setup
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Destroy
        run: |
          terraform destroy \
            -var="aws_region=${{ vars.AWS_REGION }}" \
            -var="project_name=github-actions-demo" \
            -var="environment=production" \
            -auto-approve
        working-directory: ./terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}